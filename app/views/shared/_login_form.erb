<div id="login-landing-wrap">
<%- form_for (@user_session ||= UserSession.new), :url => user_sessions_path, :html => {:id => 'login-form' } do |f|  %>
  <%- if @user_session.errors.on_base %>
    <div class='error error-base'>
      <%= error_message_on @user_session, :base %>
    </div>
  <%- else %>
    <div class='error' style="display: none;"></div>
  <%- end %>
  <div class='notice' style="display: none;"></div>
<ul>
	<li class="login-username">
	  <%- if @user_session.errors.on('email') %>
      <div class='error error-email'>
        <%= error_message_on @user_session, :email %>
      </div>
      <%- else %>
        <div class='error error-email' style="display: none;"></div>
    <%- end %>
		<label for="user_session_email">Email</label>
		<input name="user_session[email]" id="user_session_email" type="text" />
	</li>
	<li class="login-password">
	  <%- if @user_session.errors.on('password') %>
      <div class='error error-password'>
        <%= error_message_on @user_session, :password %>
      </div>
    <%- else %>
      <div class='error error-password' style="display: none;"></div>
    <%- end %>
		<label for="user_session_password">Password</label>
		<input name="user_session[password]" id="user_session_password" type="password" />
		<a href="<%= new_password_reset_path %>">Forgot?</a>
	</li>	
	<li>
		<button class="button" type="submit">Sign In</button>
		<label for="user_session_remember_me">Keep me signed in</label><input type="checkbox" class="checkbox" id="user_session_remember_me" name="user_session[remember_me]" value="1">    
		<input type=hidden name="redirect" value="<%= request.request_uri %>">
	</li>
</ul>
<%- end %>

    <div class="login-options">
	<p>Don't have an account?</p>
	<a href="<%= new_account_url %>" class="button" id="create-account">Create one</a>

    <%- if ! MySociety::Config.get('FACEBOOK_APP_ID','').empty? %>
	    <p>Sign in with Facebook</p>
	    <a href="#" onclick="checkLoginOrCallFacebook()" id="facebook" class="facebook">Facebook Connect</a>
	<%- end %>
</div>
<div id="fb-root"></div>

<%- if ! MySociety::Config.get('FACEBOOK_APP_ID','').empty? %>
<script>
    var fmtPopup = undefined;
    var fmtPopupName = 'fmtfblogin';
    var fmtPopupParams =  'width=580,height=400,location=no,menubar=no,toolbar=no,scrollbars:auto';
    var fbButtonState = 'idle'; // idle, busy or blocked (if it seems popup was denied)
    var url = '';

    function checkLoginOrCallFacebook(){
        if (fbButtonState == 'idle'){
            fbButtonState = 'busy'; 
            $(".facebook").css('background-repeat', 'repeat-y');
            paintFbButton(fbButtonState);
            FB.getLoginStatus(function(response) {
                var rememberMe = $('#user_session_remember_me').is(':checked');
                if (response.session && response.status && response.status == 'connected') { // fb says: logged in
                    var authParams = { 'access_token' : response.session.access_token, 
                                        'token_expiry' : response.session.expires,
                                        'source' : 'facebook',
                                        'remember_me' : rememberMe
                                    };
                    if (fmtPopup){fmtPopup.close()};
                    window.externalAuth(authParams);
                } else {
                    var path = 'https://www.facebook.com/dialog/oauth?';
                    var redirectUri = document.location.protocol + '//' + document.location.host 
                        + '/facebook_callback.html?fmt_remember=' + rememberMe;
                    var queryParams = ['client_id=' + fmt_facebook_app_id,
                        'redirect_uri=' + redirectUri,
                        'scope=email',
                        'display=popup',
                        'response_type=token'];
                    url = path + queryParams.join('&');                    
                    fmtPopup = window.open(url, fmtPopupName, fmtPopupParams);
                    // Can't usefully detect blocked popups on current Chrome: let the browser notify the user. Barely satisfactory.
                    if (!fmtPopup || fmtPopup.closed || typeof fmtPopup.closed=='undefined'){
                        fbButtonState = 'blocked';
                    } else {
                        fbButtonState = 'idle';
                        fmtPopup.focus();                        
                    }
                    paintFbButton(fbButtonState);
                }
            });
        } else if (fbButtonState == 'blocked') {
            if (url){
                fmtPopup = window.open(url, fmtPopupName, fmtPopupParams);  
            } else {
                // something goofy with the URL means it wasn't going to work anyway :-|
            }
            fbButtonState = 'idle';
        }
        if (fbButtonState == 'idle') {
            paintFbButton(fbButtonState);
        }
        return false;
    }
        
    function paintFbButton(state) {
        var bgPosY;
        switch (state){
            case 'busy':
                bgPosY = '-50px';
                break;
            case 'blocked':
                bgPosY = '-100px'; 
                break;
            default:
                bgPosY = '0px';
        }
        $(".facebook").css('background-position', '0px ' + bgPosY); 
    }

</script>
<%- end %>

</div>
