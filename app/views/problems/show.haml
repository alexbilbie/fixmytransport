- @title = "#{MySociety::Format.ucfirst(@problem.location.name)}: #{@problem.subject}"
#map-col
  = render :partial => 'shared/map', :locals => { :locations => [@problem.location], :other_locations => [], :link_type => :location, :height => MAP_HEIGHT, :width => MAP_WIDTH }
.problem-full
  - if @problem.status == :fixed
    .fixed= t(:problem_has_been_fixed)
  %h2.name= @title
  .details
    =t(:reported).titleize
    %span.posted-time= t(:posted_time, :time => time_ago_in_words(@problem.confirmed_at))
    %span.author=  t(:by, :name => @problem.reporter_name)
    - unless @problem.location.is_a?(SubRoute)
      %span.transport-location!= t(:problem_location, :link => link_to(@problem.location.description, location_url(@problem.location)))
    - if @problem.sent_at
      .sent-time= t(:sent_time, :interval => distance_of_time_in_words(@problem.sent_at, @problem.confirmed_at), :recipient => @problem.recipients.map{ |recipient| recipient.name }.to_sentence)

  %p.problem!= simple_format(@problem.description)
  - if @problem.date or @problem.time
    .problem-datetime= t(:problem_occurred, :date_and_time => problem_date_and_time(@problem))
  %h3= t(:updates)
  .updates
    - @problem.updates.visible.each do |update| 
      .problem-event
        %a{:name => "update_#{update.id}"}
        %span.date= t(:posted_time, :time => time_ago_in_words(update.confirmed_at))
        %span.update
          = t(:user_updates, :name => update.reporter_name)  
          = "\"#{update.text}\""
        - if update.mark_fixed?
          %span.fixed-text>= ", #{t(:marked_as_fixed)}"
    = render :partial => 'update_form'
